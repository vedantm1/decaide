Context:
I already have a working OpenAI chat‑completion function that, given a DECA cluster (e.g. “Personal Financial Literacy”), a competition level (“District”/“State”/“ICDC”), and a list of categories (e.g. “Investing”, “Saving”), returns a JSON‑formatted practice test (an array of objects with "question" and "answer" fields). Right now this lives in a local script; I want to expose it as a REST endpoint in my Replit project so my front‑end can call it directly from the browser.

Goal:

Create a Node.js + Express server in Replit (server.js) that:

Reads my OPENAI_API_KEY from an environment variable.

Exposes a single POST endpoint at /api/generate.

When /api/generate is called with a JSON body containing { cluster, difficulty, categories, numQuestions }, it calls my existing OpenAI chat‑completion logic and returns the parsed JSON test.

Returns a 400 Bad Request if any of the required fields are missing, and a 500 Internal Server Error if OpenAI returns invalid JSON.

Create a minimal front‑end HTML/JavaScript file (public/index.html) that:

Presents dropdowns for cluster and difficulty, checkboxes (or a multi‑select) for categories, and an input for number of questions.

When the user clicks “Generate Practice Test,” it sends a POST to /api/generate with {"cluster": "...", "difficulty": "...", "categories": [...], "numQuestions": 10}.

Renders the returned array of { question, answer } on the page (each question followed by its answer).

Ensure CORS is enabled so the front‑end can call the backend on Replit.

Walk me through any environment variables or Replit‐specific setup I need (e.g. where to store OPENAI_API_KEY, how to set the “Run” command).

Styling and format requirements:

Use modern ES modules (import express from "express") rather than CommonJS.

Serve static files from a public/ directory (e.g. app.use(express.static("public"))).

The front‑end JavaScript should use fetch() to call /api/generate.

The server should listen on process.env.PORT || 3000.

Do not include any additional middleware or routes—only what’s needed for this feature.

Return the generated test as JSON in a property called "test", e.g. { "test": [ { "question": "...", "answer": "..." }, … ] }.

Output format:

First, show me the full contents of package.json (with dependencies: express, cors, body-parser, and openai).

Then show me the full contents of server.js.

Then show me the full contents of public/index.html.

Finally, include a short “README” snippet explaining how to add the OPENAI_API_KEY in Replit’s Secrets and what the Replit “Run” button should execute.