/*
================================================================================
| FILE: index.js (Your Backend Server)                                         |
| LOCATION: Main project folder (not inside 'public')                          |
================================================================================
*/

const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');

const app = express();
const port = 3001;

// --- Middleware Setup ---
// This allows your frontend and backend to talk to each other
app.use(cors());
// This lets your backend understand JSON sent from the frontend
app.use(express.json());
// This serves all the files in your 'public' folder (your frontend)
app.use(express.static(path.join(__dirname, 'public')));


// --- The Master AI Prompt ---
// This is your complete, detailed set of instructions for the AI.
const masterPrompt = `
SYSTEM
You are a world-class psychometrician, item-writer, and certified DECA Advisor.  
You have memorized:

• DECA’s National Curriculum Standards and every Performance Indicator (PI) code  
• The exact 2024-25 blueprint counts (see ↓ blueprintData)  
• MBA Research’s style manual for multiple-choice items (stem tone, option balance, cognitive-level targets)  
• All seven clusters’ publicly-released sample exams with their embedded “look-and-feel,” wording conventions, and answer-key formats 

###############  2024-25 OFFICIAL BLUEPRINT COUNTS  ###############
blueprintData = {
 "Business Administration Core": { "Business Law": {"District":1,"Association":1,"ICDC":4}, "Communications": {"District":15,"Association":15,"ICDC":11}, "Customer Relations": {"District":5,"Association":5,"ICDC":4}, "Economics": {"District":7,"Association":7,"ICDC":12}, "Emotional Intelligence":{"District":22,"Association":22,"ICDC":19}, "Entrepreneurship": {"District":0,"Association":0,"ICDC":1}, "Financial Analysis": {"District":16,"Association":16,"ICDC":13}, "Human Resources Management":{"District":1,"Association":1,"ICDC":1}, "Information Management":{"District":10,"Association":10,"ICDC":11}, "Marketing": {"District":1,"Association":1,"ICDC":1}, "Operations": {"District":11,"Association":11,"ICDC":13}, "Professional Development":{"District":11,"Association":11,"ICDC":9}, "Strategic Management":{"District":0,"Association":0,"ICDC":1} },
 "Business Management + Administration": { "Business Law":{"District":5,"Association":5,"ICDC":5}, "Communications":{"District":7,"Association":6,"ICDC":6}, "Customer Relations":{"District":2,"Association":2,"ICDC":1}, "Economics":{"District":6,"Association":5,"ICDC":4}, "Emotional Intelligence":{"District":9,"Association":8,"ICDC":6}, "Entrepreneurship":{"District":1,"Association":0,"ICDC":0}, "Financial Analysis":{"District":7,"Association":6,"ICDC":5}, "Human Resources Management":{"District":1,"Association":0,"ICDC":0}, "Information Management":{"District":7,"Association":6,"ICDC":6}, "Knowledge Management":{"District":6,"Association":7,"ICDC":9}, "Marketing":{"District":1,"Association":1,"ICDC":1}, "Operations":{"District":21,"Association":24,"ICDC":26}, "Professional Development":{"District":6,"Association":5,"ICDC":4}, "Project Management":{"District":6,"Association":7,"ICDC":8}, "Quality Management":{"District":3,"Association":4,"ICDC":5}, "Risk Management":{"District":4,"Association":5,"ICDC":5}, "Strategic Management":{"District":8,"Association":9,"ICDC":10} },
 "Finance": { "Business Law":{"District":7,"Association":8,"ICDC":7}, "Communications":{"District":5,"Association":4,"ICDC":3}, "Customer Relations":{"District":5,"Association":5,"ICDC":4}, "Economics":{"District":6,"Association":5,"ICDC":4}, "Emotional Intelligence":{"District":9,"Association":8,"ICDC":6}, "Entrepreneurship":{"District":1,"Association":0,"ICDC":0}, "Financial Analysis":{"District":24,"Association":28,"ICDC":30}, "Financial-Information Management":{"District":9,"Association":10,"ICDC":12}, "Human Resources Management":{"District":1,"Association":0,"ICDC":0}, "Information Management":{"District":6,"Association":5,"ICDC":5}, "Marketing":{"District":1,"Association":1,"ICDC":1}, "Operations":{"District":6,"Association":5,"ICDC":4}, "Professional Development":{"District":13,"Association":14,"ICDC":15}, "Risk Management":{"District":6,"Association":7,"ICDC":9}, "Strategic Management":{"District":1,"Association":0,"ICDC":0} },
 "Marketing": { "Business Law":{"District":2,"Association":2,"ICDC":1}, "Channel Management":{"District":5,"Association":6,"ICDC":7}, "Communications":{"District":5,"Association":4,"ICDC":3}, "Customer Relations":{"District":2,"Association":2,"ICDC":1}, "Economics":{"District":6,"Association":5,"ICDC":4}, "Emotional Intelligence":{"District":9,"Association":8,"ICDC":6}, "Entrepreneurship":{"District":1,"Association":0,"ICDC":0}, "Financial Analysis":{"District":6,"Association":5,"ICDC":4}, "Human Resources Management":{"District":1,"Association":0,"ICDC":0}, "Information Management":{"District":5,"Association":4,"ICDC":3}, "Market Planning":{"District":4,"Association":4,"ICDC":5}, "Marketing":{"District":1,"Association":1,"ICDC":1}, "Marketing-Information Management":{"District":11,"Association":14,"ICDC":16}, "Operations":{"District":6,"Association":5,"ICDC":4}, "Pricing":{"District":3,"Association":4,"ICDC":4}, "Product/Service Management":{"District":11,"Association":13,"ICDC":15}, "Professional Development":{"District":6,"Association":5,"ICDC":5}, "Promotion":{"District":9,"Association":11,"ICDC":13}, "Selling":{"District":6,"Association":7,"ICDC":8}, "Strategic Management":{"District":1,"Association":0,"ICDC":0} },
 "Hospitality + Tourism": { "Business Law":{"District":3,"Association":3,"ICDC":2}, "Communications":{"District":5,"Association":4,"ICDC":3}, "Customer Relations":{"District":8,"Association":9,"ICDC":9}, "Economics":{"District":6,"Association":6,"ICDC":5}, "Emotional Intelligence":{"District":9,"Association":9,"ICDC":7}, "Entrepreneurship":{"District":1,"Association":0,"ICDC":0}, "Financial Analysis":{"District":8,"Association":7,"ICDC":7}, "Human Resources Management":{"District":2,"Association":1,"ICDC":1}, "Information Management":{"District":14,"Association":15,"ICDC":15}, "Knowledge Management":{"District":0,"Association":1,"ICDC":1}, "Market Planning":{"District":1,"Association":1,"ICDC":2}, "Marketing":{"District":1,"Association":1,"ICDC":2}, "Operations":{"District":13,"Association":13,"ICDC":13}, "Pricing":{"District":1,"Association":1,"ICDC":1}, "Product/Service Management":{"District":6,"Association":7,"ICDC":9}, "Professional Development":{"District":8,"Association":7,"ICDC":6}, "Promotion":{"District":2,"Association":3,"ICDC":3}, "Quality Management":{"District":1,"Association":1,"ICDC":1}, "Risk Management":{"District":1,"Association":1,"ICDC":2}, "Selling":{"District":7,"Association":8,"ICDC":9}, "Strategic Management":{"District":3,"Association":2,"ICDC":2} },
 "Personal Financial Literacy": { "Earning Income":{"District":25,"Association":20,"ICDC":16}, "Spending":{"District":14,"Association":14,"ICDC":14}, "Saving":{"District":15,"Association":14,"ICDC":13}, "Investing":{"District":15,"Association":19,"ICDC":21}, "Managing Credit":{"District":16,"Association":19,"ICDC":21}, "Managing Risk":{"District":15,"Association":14,"ICDC":15} },
 "Entrepreneurship": { "Business Law":{"District":4,"Association":4,"ICDC":3}, "Channel Management":{"District":3,"Association":3,"ICDC":3}, "Communications":{"District":1,"Association":0,"ICDC":1}, "Customer Relations":{"District":1,"Association":1,"ICDC":1}, "Economics":{"District":3,"Association":3,"ICDC":2}, "Emotional Intelligence":{"District":6,"Association":6,"ICDC":4}, "Entrepreneurship":{"District":14,"Association":13,"ICDC":14}, "Financial Analysis":{"District":10,"Association":9,"ICDC":11}, "Human Resources Management":{"District":5,"Association":4,"ICDC":4}, "Information Management":{"District":4,"Association":3,"ICDC":2}, "Market Planning":{"District":5,"Association":6,"ICDC":6}, "Marketing":{"District":1,"Association":1,"ICDC":1}, "Marketing-Information Management":{"District":2,"Association":3,"ICDC":2}, "Operations":{"District":13,"Association":13,"ICDC":14}, "Pricing":{"District":2,"Association":3,"ICDC":2}, "Product/Service Management":{"District":4,"Association":4,"ICDC":4}, "Professional Development":{"District":5,"Association":5,"ICDC":4}, "Promotion":{"District":6,"Association":7,"ICDC":8}, "Quality Management":{"District":1,"Association":1,"ICDC":1}, "Risk Management":{"District":2,"Association":3,"ICDC":4}, "Selling":{"District":1,"Association":1,"ICDC":1}, "Strategic Management":{"District":7,"Association":7,"ICDC":8} }
}
################################################################

################ DIFFICULTY MIX BY LEVEL ################
difficultyMix = {
 "District":{"easy":0.50,"medium":0.35,"hard":0.15},
 "Association":{"easy":0.40,"medium":0.40,"hard":0.20},
 "ICDC":{"easy":0.30,"medium":0.40,"hard":0.30}
}
#########################################################

######## DEFAULT OUTPUT SCHEMA (JSON MODE) ########
schemaJSON = {
 "metadata":{},
 "questions":[],
 "answer_key":{}
}
###################################################

####################  RULES  ######################
0 ▸ If both \`cluster\` & \`level\` are supplied in the user request, generate the exam.  
1 ▸ Use blueprintData exactly—IA counts must sum to 100.  
2 ▸ Apply difficultyMix quotas.  
3 ▸ Tag each item with accurate \`pi_codes\`.  
4 ▸ Follow MBA style: stem-first, 4 options (A–D), parallel grammar, plausible distractors, answer rotation ≈25 % each.  
5 ▸ Context rotation & cognitive levels as outlined previously.  
6 ▸ Default output is JSON (schemaJSON).  
7 ▸ Optional “rationales on” appends a one-sentence rationale per item.  
8 ▸ Self-validate counts, quotas, duplication, JSON syntax.  
9 ▸ Output *only* the requested exam—no extra commentary or markdown.
###################################################
`;

// --- The API Endpoint ---
// This is what your frontend will call.
app.post('/api/generate-test', async (req, res) => {
    try {
        // Get the user's choices from the frontend
        const { cluster, level, questionCount } = req.body;

        if (!cluster || !level || !questionCount) {
            return res.status(400).json({ error: 'Cluster, level, and question count are required.' });
        }
        
        // This is the specific part the AI will read as the user's request
        const userRequestPrompt = `
USER
Generate a ${questionCount}-question exam.
cluster = ${cluster}
level   = ${level}
format  = json
rationales = off
        `.trim();

        // Prepare the full conversation for the AI
        const messages = [
            {
                role: "system",
                content: masterPrompt
            },
            {
                role: "user",
                content: userRequestPrompt
            }
        ];

        // Get your secure credentials from Replit Secrets
        const azureEndpoint = process.env.AZURE_OPENAI_ENDPOINT;
        const azureApiKey = process.env.AZURE_OPENAI_KEY;

        if (!azureEndpoint || !azureApiKey) {
            throw new Error("Azure credentials are not configured in Replit Secrets.");
        }
        
        const requestData = {
            messages: messages,
            max_tokens: 8192,
            temperature: 0.7,
            top_p: 0.95,
            response_format: { type: "json_object" }
        };

        const headers = {
            'Content-Type': 'application/json',
            'api-key': azureApiKey
        };
        
        console.log(`Sending request to Azure for a ${level} ${cluster} exam...`);
        const response = await axios.post(azureEndpoint, requestData, { headers });
        console.log("Received response from Azure.");
        
        // The AI's response is a string of JSON, so we parse it into a real object
        const quizJson = JSON.parse(response.data.choices[0].message.content);

        // Send the complete, structured quiz back to the frontend
        res.json(quizJson);

    } catch (error) {
        console.error("Error generating quiz:", error.response ? error.response.data : error.message);
        res.status(500).json({ error: 'Failed to generate quiz.' });
    }
});

app.listen(port, () => {
    console.log(`DecA(I)de server running on port ${port}`);
});
```html
<!--
================================================================================
| FILE: public/index.html (Your Frontend UI Structure)                         |
| LOCATION: Inside the 'public' folder                                         |
================================================================================
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DecA(I)de Practice Tests</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="[https://fonts.googleapis.com](https://fonts.googleapis.com)">
    <link rel="preconnect" href="[https://fonts.gstatic.com](https://fonts.gstatic.com)" crossorigin>
    <link href="[https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap](https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap)" rel="stylesheet">
</head>
<body>

    <div class="background-overlay"></div>

    <div class="container" id="app-container">
        
        <!-- ======================= -->
        <!-- CONFIGURATION SCREEN    -->
        <!-- ======================= -->
        <div id="config-screen">
            <div class="header">
                <h1>Practice Tests</h1>
                <p>Practice with exam-style questions to prepare for your DECA test</p>
            </div>
            <div class="config-box">
                <h2>Configure Your Practice Test</h2>

                <div class="form-group">
                    <label for="test-type">Test Type</label>
                    <select id="test-type">
                        <option>Business Management + Administration</option>
                        <option>Business Administration Core</option>
                        <option>Finance</option>
                        <option>Marketing</option>
                        <option>Hospitality + Tourism</option>
                        <option>Personal Financial Literacy</option>
                        <option>Entrepreneurship</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="difficulty-type">Difficulty Type</label>
                    <select id="difficulty-type">
                        <option>District</option>
                        <option>Association</option>
                        <option>ICDC</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="question-count">Number of Questions: <span id="question-count-value">50</span></label>
                    <input type="range" id="question-count" min="10" max="100" value="50" class="slider">
                </div>
                
                <button id="start-test-btn">Start Practice Test</button>
            </div>
        </div>

        <!-- ======================= -->
        <!-- LOADING SCREEN          -->
        <!-- ======================= -->
        <div id="loading-screen" class="hidden">
            <div class="spinner"></div>
            <h2>Generating your custom test...</h2>
            <p>This may take up to 30 seconds.</p>
        </div>

        <!-- ======================= -->
        <!-- QUIZ SCREEN             -->
        <!-- ======================= -->
        <div id="quiz-screen" class="hidden">
            <div class="quiz-header">
                <h2 id="quiz-title">Quiz Title</h2>
                <div class="quiz-progress-info">
                    Question <span id="current-q-number">1</span> of <span id="total-q-number">100</span>
                </div>
            </div>
            <div class="progress-bar-container">
                <div class="progress-bar" id="progress-bar"></div>
            </div>
            <div id="question-container">
                <h3 id="question-text">What is the capital of France?</h3>
                <div id="options-container" class="options-container">
                    <!-- Options will be generated here by JavaScript -->
                </div>
            </div>
            <div class="quiz-footer">
                <button id="next-question-btn">Next</button>
            </div>
        </div>

        <!-- ======================= -->
        <!-- RESULTS SCREEN          -->
        <!-- ======================= -->
        <div id="results-screen" class="hidden">
             <h2>Quiz Results</h2>
             <div class="score-container">
                 <p>Your Score</p>
                 <div class="score-circle">
                     <span id="score-percentage">85%</span>
                 </div>
                 <p id="score-text">You answered 85 out of 100 questions correctly.</p>
             </div>
             <button id="restart-quiz-btn">Take Another Test</button>
             <div id="review-container">
                <!-- Answer review will be generated here by JavaScript -->
             </div>
        </div>

    </div>

    <script src="script.js"></script>
</body>
</html>
```css
/*
================================================================================
| FILE: public/style.css (Makes the UI Look Professional)                      |
| LOCATION: Inside the 'public' folder                                         |
================================================================================
*/

:root {
    --primary-blue: #4A90E2;
    --primary-blue-dark: #3a75b8;
    --background-dark: #1A1A2E;
    --surface-dark: #162447;
    --surface-light: #1F4068;
    --text-primary: #E0E0E0;
    --text-secondary: #B0B0B0;
    --accent-green: #50E3C2;
    --accent-red: #E3506A;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--background-dark);
    color: var(--text-primary);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 2rem;
}

.background-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('https://www.transparenttextures.com/patterns/low-contrast-linen.png');
    opacity: 0.05;
    z-index: -1;
}

.container {
    width: 100%;
    max-width: 800px;
    background-color: var(--surface-dark);
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    overflow: hidden;
}

.hidden {
    display: none !important;
}

/* --- Config Screen --- */
#config-screen, #loading-screen, #results-screen {
    padding: 40px;
    text-align: center;
}

.header {
    margin-bottom: 30px;
}

.header h1 {
    font-size: 2.5rem;
    font-weight: 900;
    margin-bottom: 10px;
}

.header p {
    font-size: 1.1rem;
    color: var(--text-secondary);
}

.config-box {
    background-color: var(--surface-light);
    border-radius: 15px;
    padding: 30px;
    text-align: left;
}

.config-box h2 {
    font-size: 1.5rem;
    margin-bottom: 25px;
    text-align: center;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: var(--text-secondary);
}

select, input[type="range"] {
    width: 100%;
    padding: 12px;
    border-radius: 8px;
    border: 2px solid #335a8a;
    background-color: var(--surface-dark);
    color: var(--text-primary);
    font-size: 1rem;
    appearance: none;
}

select {
     background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23E0E0E0' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1em;
}

button {
    width: 100%;
    padding: 15px;
    border: none;
    border-radius: 8px;
    background-color: var(--primary-blue);
    color: white;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
}

button:hover {
    background-color: var(--primary-blue-dark);
    transform: translateY(-2px);
}

/* --- Loading Screen --- */
#loading-screen h2 {
    font-size: 1.8rem;
    margin-bottom: 10px;
}
#loading-screen p {
    color: var(--text-secondary);
}
.spinner {
    width: 60px;
    height: 60px;
    border: 5px solid rgba(255, 255, 255, 0.3);
    border-top-color: var(--primary-blue);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}
@keyframes spin {
    to { transform: rotate(360deg); }
}

/* --- Quiz Screen --- */
#quiz-screen {
    padding: 40px;
}

.quiz-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}
#quiz-title {
    font-size: 1.5rem;
    font-weight: 700;
}
.quiz-progress-info {
    background-color: var(--surface-light);
    padding: 8px 15px;
    border-radius: 20px;
    font-weight: 600;
}

.progress-bar-container {
    width: 100%;
    height: 10px;
    background-color: var(--surface-light);
    border-radius: 5px;
    margin-bottom: 30px;
}
.progress-bar {
    width: 0%;
    height: 100%;
    background-color: var(--primary-blue);
    border-radius: 5px;
    transition: width 0.3s ease;
}

#question-text {
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 30px;
    min-height: 80px;
}

.option {
    display: block;
    background-color: var(--surface-light);
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 15px;
    cursor: pointer;
    border: 2px solid transparent;
    transition: all 0.2s;
}
.option:hover {
    border-color: var(--primary-blue);
}
.option.selected {
    background-color: var(--primary-blue-dark);
    border-color: var(--primary-blue);
}

.option.correct {
    background-color: #1a5c4e;
    border-color: var(--accent-green);
}

.option.incorrect {
    background-color: #6e2a3c;
    border-color: var(--accent-red);
}

.quiz-footer {
    margin-top: 30px;
}

/* --- Results Screen --- */
#results-screen h2 {
    font-size: 2rem;
    font-weight: 900;
    margin-bottom: 30px;
}

.score-container {
    background-color: var(--surface-light);
    padding: 30px;
    border-radius: 15px;
    margin-bottom: 30px;
}

.score-circle {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: conic-gradient(var(--primary-blue) 0%, var(--surface-dark) 0%);
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto;
}

.score-circle span {
    font-size: 2.5rem;
    font-weight: 900;
}

#score-text {
    font-size: 1.2rem;
    color: var(--text-secondary);
}

#review-container {
    margin-top: 40px;
    text-align: left;
}

.review-item {
    background-color: var(--surface-light);
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 10px;
    border-left: 5px solid var(--accent-red);
}
.review-item.correct {
    border-left-color: var(--accent-green);
}
.review-item p {
    margin-bottom: 5px;
}

```javascript
/*
================================================================================
| FILE: public/script.js (Your Frontend Logic)                                 |
| LOCATION: Inside the 'public' folder                                         |
================================================================================
*/

document.addEventListener('DOMContentLoaded', () => {
    // --- Element Selectors ---
    const configScreen = document.getElementById('config-screen');
    const loadingScreen = document.getElementById('loading-screen');
    const quizScreen = document.getElementById('quiz-screen');
    const resultsScreen = document.getElementById('results-screen');

    const startBtn = document.getElementById('start-test-btn');
    const testTypeSelect = document.getElementById('test-type');
    const difficultySelect = document.getElementById('difficulty-type');
    const questionCountSlider = document.getElementById('question-count');
    const questionCountValue = document.getElementById('question-count-value');
    
    const quizTitle = document.getElementById('quiz-title');
    const currentQNumber = document.getElementById('current-q-number');
    const totalQNumber = document.getElementById('total-q-number');
    const progressBar = document.getElementById('progress-bar');
    const questionText = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const nextQuestionBtn = document.getElementById('next-question-btn');
    
    const scorePercentage = document.getElementById('score-percentage');
    const scoreText = document.getElementById('score-text');
    const scoreCircle = document.querySelector('.score-circle');
    const reviewContainer = document.getElementById('review-container');
    const restartQuizBtn = document.getElementById('restart-quiz-btn');

    // --- State Variables ---
    let quizData = null;
    let currentQuestionIndex = 0;
    let userAnswers = {}; // { questionId: selectedAnswer }

    // --- Event Listeners ---

    // Update slider value display
    questionCountSlider.addEventListener('input', () => {
        questionCountValue.textContent = questionCountSlider.value;
    });

    // Start the test
    startBtn.addEventListener('click', async () => {
        const userSelections = {
            cluster: testTypeSelect.value,
            level: difficultySelect.value,
            questionCount: parseInt(questionCountSlider.value)
        };

        showScreen('loading');

        try {
            // This calls your backend API
            const response = await fetch('/api/generate-test', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userSelections)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to generate the test.');
            }
            
            const data = await response.json();
            
            // The AI only generates 100 questions, so we slice if user asks for less
            quizData = data;
            if(quizData.questions.length > userSelections.questionCount) {
                quizData.questions = quizData.questions.slice(0, userSelections.questionCount);
            }
            
            startQuiz();

        } catch (error) {
            alert(`Error: ${error.message}`);
            showScreen('config');
        }
    });
    
    // Go to the next question
    nextQuestionBtn.addEventListener('click', () => {
        const isAnswered = userAnswers[quizData.questions[currentQuestionIndex].id] !== undefined;
        if (!isAnswered) {
            alert("Please select an answer before proceeding.");
            return;
        }

        currentQuestionIndex++;
        if (currentQuestionIndex < quizData.questions.length) {
            displayQuestion();
        } else {
            showResults();
        }
    });
    
    // Restart the quiz
    restartQuizBtn.addEventListener('click', () => {
        quizData = null;
        currentQuestionIndex = 0;
        userAnswers = {};
        showScreen('config');
    });

    // --- Functions ---
    
    function showScreen(screenName) {
        configScreen.classList.add('hidden');
        loadingScreen.classList.add('hidden');
        quizScreen.classList.add('hidden');
        resultsScreen.classList.add('hidden');
        
        document.getElementById(`${screenName}-screen`).classList.remove('hidden');
    }
    
    function startQuiz() {
        currentQuestionIndex = 0;
        userAnswers = {};
        showScreen('quiz');
        quizTitle.textContent = `${quizData.metadata.level} ${quizData.metadata.cluster} Exam`;
        displayQuestion();
    }

    function displayQuestion() {
        const question = quizData.questions[currentQuestionIndex];
        
        questionText.textContent = question.stem;
        optionsContainer.innerHTML = '';
        
        // Use the AI-provided options A, B, C, D
        for (const key in question.options) {
            const optionEl = document.createElement('div');
            optionEl.classList.add('option');
            optionEl.textContent = `${key}. ${question.options[key]}`;
            optionEl.dataset.answerKey = key;
            
            optionEl.addEventListener('click', () => handleOptionSelect(question, key, optionEl));
            optionsContainer.appendChild(optionEl);
        }
        
        updateProgress();
    }

    function handleOptionSelect(question, selectedKey, selectedElement) {
        // Prevent re-answering
        if (userAnswers[question.id] !== undefined) return;

        userAnswers[question.id] = selectedKey;

        document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
        selectedElement.classList.add('selected');
    }

    function updateProgress() {
        const totalQuestions = quizData.questions.length;
        currentQNumber.textContent = currentQuestionIndex + 1;
        totalQNumber.textContent = totalQuestions;
        
        const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
        progressBar.style.width = `${progress}%`;

        // Change button text on the last question
        if (currentQuestionIndex === totalQuestions - 1) {
            nextQuestionBtn.textContent = 'Finish & See Results';
        } else {
            nextQuestionBtn.textContent = 'Next';
        }
    }

    function showResults() {
        let score = 0;
        quizData.questions.forEach(q => {
            const correctKey = quizData.answer_key[q.id.toString()];
            if (userAnswers[q.id] === correctKey) {
                score++;
            }
        });
        
        const totalQuestions = quizData.questions.length;
        const percentage = Math.round((score / totalQuestions) * 100);

        scorePercentage.textContent = `${percentage}%`;
        scoreText.textContent = `You answered ${score} out of ${totalQuestions} questions correctly.`;
        scoreCircle.style.background = `conic-gradient(var(--primary-blue) ${percentage}%, var(--surface-dark) 0%)`;

        displayReview();
        showScreen('results');
    }

    function displayReview() {
        reviewContainer.innerHTML = '<h3>Answer Review</h3>';
        quizData.questions.forEach(q => {
            const correctKey = quizData.answer_key[q.id.toString()];
            const userKey = userAnswers[q.id];
            
            const item = document.createElement('div');
            item.classList.add('review-item');
            
            const isCorrect = userKey === correctKey;
            item.classList.toggle('correct', isCorrect);

            item.innerHTML = `
                <p><strong>Q: ${q.stem}</strong></p>
                <p>Your answer: ${userKey ? userKey + '. ' + q.options[userKey] : 'Not answered'}</p>
                ${!isCorrect ? `<p>Correct answer: ${correctKey}. ${q.options[correctKey]}</p>` : ''}
            `;
            reviewContainer.appendChild(item);
        });
    }
});
